# https://docs.docker.com/build/ci/github-actions/manage-tags-labels/

name: "Elk Docker Build Cache Push"
description: Builds an image with cache and pushes it to a registry (ECR)
inputs:
  # TODO: support multiple images
  image-name: 
    description: The name of the image to build and push
    required: true
    default: ${{ github.event.repository.name }}
  # We always use a path context since, accoring to the docs: 
  # Be careful because any file mutation in the steps that precede the build
  # step will be ignored, including processing of the .dockerignore file since
  # the context is based on the Git reference. However, you can use the Path
  # context using the context input alongside the actions/checkout action to
  # remove this restriction.
  context: 
    description: The path context to use for the build - as opposed to the automatic GitContext by docker 
    default: '.'
  extra-tags: 
    description: List of comma separated values to be added to the tags
    default: ""
  push-image: 
    description: Whether to push the image to the registry
    default: "true"
  registry: 
    description: The registry to push the image to ECR
    default: "aws" 
  aws-login-overrides: 
    description: Json object with the inputs to override the default aws login values
    default: '{}'
    required: false
runs:
  using: composite
  steps:
    - name: AWS Login  
      uses: elk-audio/.github/.github/actions/elk-aws-login@main
      if: ${{ inputs.registry == 'aws' }}
      id: aws-login
      with: 
        overrides: ${{ inputs.aws-login-overrides }}
    - name: Check or create ECR repository
      shell: bash {0}
      continue-on-error: true
      run: |
        aws ecr describe-repositories --repository-names ${{ inputs.image-name }} 
        if [ $? -ne 0 ]; then
          echo "Repository does not exist, creating..."
          aws ecr create-repository --repository-name ${{ inputs.image-name }} --tags --tags Key=created-by,Value=github-action
        else 
          echo "Repository exists" 
        fi
    - name: Checkout repository code
      uses: actions/checkout@v4
    - name: Build number
      id: build-number
      uses: elk-audio/.github/.github/actions/build-tag-number@main
    - name: Generate list of extra tags
      if: ${{ inputs.extra-tags != '' }}
      shell: bash
      id: extra-tags
      run: |
        echo 'result<<EOF' >> $GITHUB_OUTPUT
        for tag in $(echo ${{ inputs.extra-tags }} | tr ',' '\n'); do
          echo "type=raw,value=$tag" >> $GITHUB_OUTPUT
        done
        # if master/main, add both master and main tags
        if [ ${{ github.ref }} = 'refs/heads/main' ] || [ ${{ github.ref }} = 'refs/heads/master' ]; then
          echo "type=raw,value=main" >> $GITHUB_OUTPUT
          echo "type=raw,value=master" >> $GITHUB_OUTPUT
        fi
        # add the build number
        echo "type=raw,value=${{ steps.build-number.outputs.build_number }}" >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT
    - name: Docker metadata - generate tags
      uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
      id: meta
      with:
        images: |
          ${{ steps.aws-login.outputs.aws-account-id }}.dkr.ecr.${{ steps.aws-login.outputs.aws-region }}.amazonaws.com/${{ inputs.image-name }}
        tags: |
            ${{ steps.extra-tags.outputs.result }}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=
            type=raw,value=latest,enable={{is_default_branch}}
    - name: Login to ECR 
      uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
      with:
        registry: ${{ steps.aws-login.outputs.aws-account-id }}.dkr.ecr.${{ steps.aws-login.outputs.aws-region }}.amazonaws.com
    - name: Setup Docker buildx
      uses: docker/setup-buildx-action@v2
    - name: Build and push to ${{ steps.aws-login.outputs.aws-account-id }}.dkr.ecr.${{ steps.aws-login.outputs.aws-region }}.amazonaws.com/${{ inputs.image-name }}
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.context }}
        push: ${{ github.event_name != 'pull_request' && inputs.push-image == 'true' }}
        tags: "${{ steps.meta.outputs.tags }}"
        cache-from: type=gha
        cache-to: type=gha,mode=max

        # https://aws.amazon.com/blogs/containers/announcing-remote-cache-support-in-amazon-ecr-for-buildkit-clients/
